# app.py
from flask import Flask, render_template, request, redirect, url_for, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import numpy as np
import joblib
import os

app = Flask(__name__)
app.secret_key = 'clave_secreta'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# Cargar modelo ML
model_path = 'models/model.pkl'
if not os.path.exists(model_path):
    raise FileNotFoundError(f"Modelo no encontrado en: {model_path}")
model = joblib.load(model_path)

# Modelos de base de datos
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)

class Prediction(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    cycling = db.Column(db.Float, nullable=False)
    smoking = db.Column(db.Float, nullable=False)
    result = db.Column(db.Integer, nullable=False)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/')
@login_required
def home():
    return render_template('index.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        if user and check_password_hash(user.password, password):
            login_user(user)
            return redirect(url_for('home'))
    return render_template('login.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        existing_user = User.query.filter_by(username=username).first()
        if existing_user:
            return render_template('register.html', message="El nombre de usuario ya existe.")
        hashed_password = generate_password_hash(password)
        new_user = User(username=username, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()
        return redirect(url_for('login'))
    return render_template('register.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/predict', methods=['POST'])
@login_required
def predict():
    try:
        cycling = float(request.form['cycling'])
        smoking = float(request.form['smoking'])
        if not (0 <= cycling <= 100 and 0 <= smoking <= 100):
            raise ValueError("Los valores deben estar entre 0 y 100.")
        features = np.array([[cycling, smoking]])
        prediction = model.predict(features)[0]
        new_pred = Prediction(user_id=current_user.id, cycling=cycling, smoking=smoking, result=int(prediction))
        db.session.add(new_pred)
        db.session.commit()
        return render_template('index.html', prediction_text=f'Resultado: {prediction}')
    except Exception as e:
        return render_template('index.html', prediction_text=f'Error: {e}')

@app.route('/api/predict', methods=['POST'])
@login_required
def api_predict():
    data = request.get_json()
    try:
        if 'cycling' not in data or 'smoking' not in data:
            return jsonify({'error': 'Faltan campos requeridos'}), 400
        cycling = float(data['cycling'])
        smoking = float(data['smoking'])
        if not (0 <= cycling <= 100 and 0 <= smoking <= 100):
            raise ValueError("Los valores deben estar entre 0 y 100.")
        features = np.array([[cycling, smoking]])
        prediction = model.predict(features)[0]
        new_pred = Prediction(user_id=current_user.id, cycling=cycling, smoking=smoking, result=int(prediction))
        db.session.add(new_pred)
        db.session.commit()
        return jsonify({'prediction': int(prediction)})
    except Exception as e:
        return jsonify({'error': str(e)}), 400

@app.route('/api/history')
@login_required
def api_history():
    preds = Prediction.query.filter_by(user_id=current_user.id).all()
    return jsonify([{ 'cycling': p.cycling, 'smoking': p.smoking, 'result': p.result } for p in preds])

if __name__ == '__main__':
    if not os.path.exists('database.db'):
        with app.app_context():
            db.create_all()
    app.run(debug=True)
